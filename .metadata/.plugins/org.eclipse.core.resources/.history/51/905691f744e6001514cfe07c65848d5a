// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5265.Robot01;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Sendable;

import edu.wpi.first.wpilibj.AnalogPotentiometer;

import edu.wpi.first.wpilibj.CameraServer;
import com.ni.vision.NIVision;
import com.ni.vision.VisionException;
import com.ni.vision.NIVision.Image;

import org.usfirst.frc5265.Robot01.commands.*;
import org.usfirst.frc5265.Robot01.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
    public static OI oi;
    Command autonomousCommand;
    SendableChooser chooser;
    	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveBase driveBase;
    public static BallIntake ballIntake;
    public static BallShooter ballShooter;
    public static GateLifter gateLifter;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    // ************ radical impact code ************ 

    public static boolean BrushState;
    public static boolean cameraState = false;
    static int camSession;
    static int camFrontNumb;
    static int camBackNumb;
    public static boolean invertDrive = false;

    Image img;
    
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    	RobotMap.init();
    	chooser = new SendableChooser();
    	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveBase = new DriveBase();
        ballIntake = new BallIntake();
        ballShooter = new BallShooter();
        gateLifter = new GateLifter();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        autonomousCommand = new AutonomousGroup();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

	    // ************ radical impact code ************ 
	    //   potDisplay = new AnalogPotentiometer();
	    // AnalogPotentiometer potDisplay = potDisplay.pidGet();
	    //SmartDashboard.putNumber("POT value", potDisplay.pidGet());
        cameraInit();
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    
    // ************ radical impact question ************ 
    // do we need these two commands?
/*    public Robot() {    	
    	}

    public void operatorControl() {
    	while (isOperatorControl() && isEnabled()) {
    		Timer.delay(0.005);	
    	}  	
    }
 */   
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
    	//GateLifter.log();
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        // ************ radical impact code ************ 
        // camera stuff next two lines
        // takes an image and sends it to the CameraServer which puts it on the desktop 
        NIVision.IMAQdxGrab(camSession, img, 1);
		CameraServer.getInstance().setImage(img);    
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
    	LiveWindow.run();
    }
    
    // ************ radical impact code ************ 
    
    // inverts the current state of the brush motor to toggle it off and on
    public static boolean BrushStateToggle() {
    	BrushState = !BrushState;
    	return BrushState;
    }
    
    // do we need this???
    public void updateStatus() {
    	
    }
    
 
    // camFront is the MS 5000, camBack is the MS 3000, and camAlt is the Logitech spare
    // open both front and back cameras, initialize to the front camera
    // 
    public void cameraInit() {
		try {
			img = NIVision.imaqCreateImage(NIVision.ImageType.IMAGE_RGB, 0);
			camFrontNumb = NIVision.IMAQdxOpenCamera(RobotMap.camFront, NIVision.IMAQdxCameraControlMode.CameraControlModeController);
			camBackNumb = NIVision.IMAQdxOpenCamera(RobotMap.camBack, NIVision.IMAQdxCameraControlMode.CameraControlModeController);
			camSession = camFrontNumb;
			NIVision.IMAQdxConfigureGrab(camSession);
		} catch (VisionException e) {
			System.out.println("VISION EXCEPTION ~ " + e);
		}
    }
    
    // flips the camera from front to back or vice versa
    // first stops the camera session, then starts it with the new camera
    // 
    public static void cameraFlip() {
    	try {
    		NIVision.IMAQdxStopAcquisition(camSession);
			if (camSession == camFrontNumb) {
				camSession = camBackNumb;	
			} else {
				camSession = camFrontNumb;
			}
			NIVision.IMAQdxConfigureGrab(camSession);
    	} catch (VisionException e) {
			System.out.println("VISION EXCEPTION ~ " + e);
		}
	}
    
}
