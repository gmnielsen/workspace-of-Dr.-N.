// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5265.Phoenix.subsystems;

import java.io.Console;

import org.usfirst.frc5265.Phoenix.Robot;
import org.usfirst.frc5265.Phoenix.RobotMap;
import org.usfirst.frc5265.Phoenix.commands.*;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Victor;

import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class StagArm extends PIDSubsystem {
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public final AnalogPotentiometer armPot = RobotMap.stagArmArmPot;
    private final static SpeedController limbMotor = RobotMap.stagArmLimbMotor;
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Initialize your subsystem here
    public StagArm() {
    	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        //super("StagArm", SmartDashboard.getNumber("PPPvalue"),SmartDashboard.getNumber("III value"),SmartDashboard.getNumber("DDD value"));
    	super("StagArm", 5.5, 0, 0);
        //System.out.println("PPPvalue in StagArm is " + SmartDashboard.getNumber("PPPvalue"));
		//setAbsoluteTolerance(SmartDashboard.getNumber("tolerance"));
    	setAbsoluteTolerance(0.003);
        getPIDController().setContinuous(false);
        //SmartDashboard.putNumber("potValue", armPot.get());
        LiveWindow.addActuator("StagArm", "PIDSubsystem Controller", getPIDController());
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
        
    }

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        //setDefaultCommand(new posStart());
    	System.out.println("Pot Value at init of Stag arm " + armPot.get());
        
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
        
    }
    
 
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;
    	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return armPot.get();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }

    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);
    	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        limbMotor.pidWrite(output);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
      
        
    }
    public void armStop() {
    	limbMotor.set(0);
    	//SmartDashboard.putNumber("potValue", armPot.get());
    	getPIDController().disable();    	
    }
    public void armSet(double potValue){
    	getPIDController().enable();
    	//SmartDashboard.putNumber("potValue", armPot.get());
    	getPIDController().setSetpoint(potValue);
    	
    	
    }
    
}
