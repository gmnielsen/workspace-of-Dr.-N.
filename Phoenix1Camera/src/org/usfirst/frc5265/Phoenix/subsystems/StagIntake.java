// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5265.Phoenix.subsystems;

import org.usfirst.frc5265.Phoenix.RobotMap;
//import org.usfirst.frc5265.Phoenix.commands.*;
import edu.wpi.first.wpilibj.SpeedController;
//import edu.wpi.first.wpilibj.Victor;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class StagIntake extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	private static final SpeedController brush = RobotMap.stagArmBrush;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
 // creating the brush state for toggling
  	public boolean BrushStateToggle() {
  		boolean BrushState = SmartDashboard.getBoolean("brushState");
      	BrushState = !BrushState;
      	SmartDashboard.putBoolean("brushState",BrushState);	
      	return BrushState;
      }
  	public boolean reverseBrushStateToggle() {
  		boolean reverseBrushState = SmartDashboard.getBoolean("reverseBrushState");
  		reverseBrushState = !reverseBrushState;
      	SmartDashboard.putBoolean("reverseBrushState",reverseBrushState);	
      	return reverseBrushState;
  	}
	public boolean rampartStateToggle() {
  		boolean rampartState = SmartDashboard.getBoolean("rampartState");
  		rampartState = !rampartState;
      	SmartDashboard.putBoolean("rampartState",rampartState);	
      	return rampartState;
	}
  	// turns the intake wheels on
  	public void intakeOn(){
     	double speed = SmartDashboard.getNumber("sp4Brush");
     	//System.out.println("intake was turned on");
     	brush.set(speed); 
     	//System.out.println("Current Speed " + RobotMap.stagArmBrush.get());
     }
  	// reverses intake wheels
  	public void intakeReverse(){
  		double speed = SmartDashboard.getNumber("sp4BrushReverse");
  		brush.set(speed);
  	}
     //turns the intake wheels off
  	public void intakeStop(){   	
     	brush.set(0);    	
     }
}

